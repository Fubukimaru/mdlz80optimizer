; Author: Santiago Ontañón
; - Patterns are separated by a blank line
; - Patterns suggested by others are credited to them below.
; - If you do a pull request with more patterns, please credit yourself in a comment before the pattern.

; thanks to pgimeno for noticing the needed constraint
pattern: Replace cp nn; jp c,mm; jp z,mm with cp nn+1; jp c,mm
0: cp ?const1
1: jp c,?const2
2: jp z,?const2
replacement:
0: cp ?const1+1
1: jp c,?const2
constraints:
notEqual(?const1,255)

; thanks to pgimeno for noticing the needed constraint
pattern: Replace cp nn; jr c,mm; jr z,mm with cp nn+1; jr c,mm
0: cp ?const1
1: jr c,?const2
2: jr z,?const2
replacement:
0: cp ?const1+1
1: jr c,?const2
constraints:
notEqual(?const1,255)

pattern: Replace cp 0 with or a
0: cp 0
replacement:
0: or a

pattern: Replace cp 1 with dec a
0: cp 1
replacement:
0: dec a
constraints:
regNotUsed(0,A)

pattern: Replace cp 255 with inc a
0: cp 255
replacement:
0: inc a
constraints:
regNotUsed(0,A)

pattern: Replace ld a,0 with xor a
0: ld a,0
replacement:
0: xor a
constraints:
flagsNotUsed(0,S,Z,H,P/V,N,C)

pattern: Replace srl a; srl a; srl a with rrca; rrca; rrca; and #1f
0: srl a
1: srl a
2: srl a
replacement:
0: rrca
1: rrca
2: rrca
2: and #1f

pattern: Remove unused ld reg,?
0: ld ?reg,?any
replacement:
constraints:
regNotUsed(0,?reg)

pattern: Replace pop bc; ld c,b; ld e,c with pop de
0: pop bc
1: ld d,b
2: ld e,c
replacement:
0: pop de
constraints:
regNotUsed(2,bc)

pattern: Replace pop bc; ld h,b; ld l,c with pop hl
0: pop bc
1: ld h,b
2: ld l,c
replacement:
0: pop hl
constraints:
regNotUsed(2,bc)

pattern: Replace 0: ld a,(nn); inc a; ld (nn),a with  ld hl,nn; inc (hl)
0: ld a,(?const1)
1: inc a
2: ld (?const1),a
replacement:
0: ld hl,?const1
1: inc (hl)
constraints:
regNotUsed(2,A,HL)

pattern: Replace ld a,(nn); inc a; ld (nn),a with  ld hl,nn; inc (hl); ld a,(hl)
0: ld a,(?const1)
1: inc a
2: ld (?const1),a
replacement:
0: ld hl,?const1
1: inc (hl)
2: ld a,(hl)
constraints:
regNotUsed(2,HL)

pattern: Replace ld b,n; ld c,m with ld bc m%256+n*256
0: ld b,?const1
1: ld c,?const2
replacement:
0: ld bc,((?const2) % 256) + 256 * (?const1)

pattern: Replace ld c,m; ld b,n with ld bc m%256+n*256
0: ld c,?const2
1: ld b,?const1
replacement:
0: ld bc,((?const2) % 256) + 256 * (?const1)

pattern: Replace ld d,n; ld e,m with ld de,m%256+n*256
0: ld d,?const1
1: ld e,?const2
replacement:
0: ld de,((?const2) % 256) + 256 * (?const1)

pattern: Replace ld e,m; ld d,n with ld de,m%256+n*256
0: ld e,?const2
1: ld d,?const1
replacement:
0: ld de,((?const2) % 256) + 256 * (?const1)

pattern: Replace ld h,n; ld l,m with ld hl,m%256+n*256
0: ld h,?const1
1: ld l,?const2
replacement:
0: ld hl,((?const2) % 256) + 256 * (?const1)

pattern: Replace ld l,m; ld h,n with ld hl,m%256+n*256
0: ld l,?const2
1: ld h,?const1
replacement:
0: ld hl,((?const2) % 256) + 256 * (?const1)

pattern: Replace ld a,n; ld (hl),a with ld (hl),n
0: ld a,?const1
1: ld (hl),a
replacement:
0: ld (hl),?const1
constraints:
regNotUsed(1,A)

pattern: Replace dec b; jr nz,label with djnz label
0: dec b
1: jr nz,?const1
replacement:
0: djnz ?const1

pattern: Replace ld a,(hl); lde (de),a; inc hl; inc de with ldi
0: ld a,(hl)
1: ld (de),a
2: inc hl
3: inc de
replacement:
0: ldi
constraints:
regNotUsed(3,A,BC)

; thanks to pgimeno for suggesting this permutation
pattern: Replace ld a,(hl); inc hl; lde (de),a; inc de with ldi
0: ld a,(hl)
2: inc hl
1: ld (de),a
3: inc de
replacement:
0: ldi
constraints:
regNotUsed(3,A,BC)

pattern: Replace ld a,(hl); lde (de),a; inc de; inc hl; with ldi
0: ld a,(hl)
1: ld (de),a
3: inc de
2: inc hl
replacement:
0: ldi
constraints:
regNotUsed(3,A,BC)

pattern: Replace ld a,(hl); lde (de),a; inc hl; inc de with ldi; inc bc
0: ld a,(hl)
1: ld (de),a
2: inc hl
3: inc de
replacement:
0: ldi
1: inc bc
constraints:
regNotUsed(3,A)

; thanks to pgimeno for suggesting this permutation
pattern: Replace ld a,(hl); inc hl; lde (de),a; inc de with ldi; inc bc
0: ld a,(hl)
2: inc hl
1: ld (de),a
3: inc de
replacement:
0: ldi
1: inc bc
constraints:
regNotUsed(3,A)

pattern: Replace ld a,(hl); lde (de),a; inc de; inc hl; with ldi
0: ld a,(hl)
1: ld (de),a
3: inc de
2: inc hl
replacement:
0: ldi
1: inc bc
constraints:
regNotUsed(3,A)

pattern: Replace ld de,nn; or a; sbc hl,de with ld de,-nn; add hl,de
0: ld de,?const1
1: or a
2: sbc hl,de
replacement:
0: ld de,-?const1
1: add hl,de

; thanks to grauw for suggesting this variation
pattern: Replace ld de,nn; and a; sbc hl,de with ld de,-nn; add hl,de
0: ld de,?const1
1: and a
2: sbc hl,de
replacement:
0: ld de,-?const1
1: add hl,de

pattern: Replace neg; add a,n with cpl; add a,n+1
0: neg
1: add a,?const1
replacement:
0: cpl
1: add a,?const1+1

pattern: Replace xor 255 with cpl
0: xor 255
replacement:
0: cpl
constraints:
flagNotUsed(0,S,Z,P/V,C)

pattern: Replace ld a,reg; neg with xor a; sub reg
0: ld a,?reg
1: neg
replacement:
0: xor a
1: sub ?reg

pattern: Replace ld a,reg; sub n; neg with ld a,n; sub reg
0: ld a,?reg
1: sub ?const
2: neg
replacement:
0: ld a,?const
1: sub ?reg

pattern: Replace sla l; rl h with add hl,hl
0: sla l
1: rl h
replacement:
0: add hl,hl
constraints:
flagsNotUsed(1,S,Z,P/V,C)

; thanks to grauw for suggesting this pattern
pattern: Replace sla a with add a,a
0: sla a
replacement:
0: add a,a
constraints:
flagsNotUsed(0,H,P/V)

; theNestruo
pattern: Replace call nn; ret with jp nn
0: call ?const
1: ret
replacement:
0: jp ?const

pattern: Replace and 1; cp 1; jr z,nn with rra; jr nz,nn
0: and 1
1: cp 1
2: jr z,?const
replacement:
0: rra
1: jr c,?const
constraints:
regNotUsed(2,A)

pattern: Replace and 1; cp 1; jp z,nn with rra; jp nz,nn
0: and 1
1: cp 1
2: jp z,?const
replacement:
0: rra
1: jp c,?const
constraints:
regNotUsed(2,A)

pattern: Replace and 1; cp 1; call z,nn with rra; call nz,nn
0: and 1
1: cp 1
2: call z,?const
replacement:
0: rra
1: call c,?const
constraints:
regNotUsed(2,A)

pattern: Replace and 1; cp 1; jr z,nn with and 1; jr nz,nn
0: and 1
1: cp 1
2: jr z,?const
replacement:
0: and 1
1: jr nz,?const

pattern: Replace and 1; cp 1; jp z,nn with and 1; jp nz,nn
0: and 1
1: cp 1
2: jp z,?const
replacement:
0: and 1
1: jp nz,?const

pattern: Replace and 1; cp 1; call z,nn with and 1; call nz,nn
0: and 1
1: cp 1
2: call z,?const
replacement:
0: and 1
1: call nz,?const
 
pattern: Replace bit 0,a; jr z,nn with rra; jr nc,nn
0: bit 0,a
1: jr z,?const
replacement:
0: rra
1: jr nc,?const
constraints:
regNotUsed(1,A)

pattern: Replace bit 7,a; jr z,nn with rla; jr nc,nn
0: bit 7,a
1: jr z,?const
replacement:
0: rla
1: jr nc,?const
constraints:
regNotUsed(1,A)

pattern: Replace bit 0,a; jp z,nn with rra; jp nc,nn
0: bit 0,a
1: jp z,?const
replacement:
0: rra
1: jp nc,?const
constraints:
regNotUsed(1,A)

pattern: Replace bit 7,a; jp z,nn with rla; jp nc,nn
0: bit 7,a
1: jp z,?const
replacement:
0: rla
1: jp nc,?const
constraints:
regNotUsed(1,A)

pattern: Replace bit 0,a; call z,nn with rra; call nc,nn
0: bit 0,a
1: call z,?const
replacement:
0: rra
1: call nc,?const
constraints:
regNotUsed(1,A)

pattern: Replace bit 7,a; call z,nn with rla; call nc,nn
0: bit 7,a
1: call z,?const
replacement:
0: rla
1: call nc,?const
constraints:
regNotUsed(1,A)

pattern: Replace ld ix,nn; ld r,(ix+mm) with ld hl,nn+mm; ld r,(hl)
0: ld ix,?const1
1: ld ?reg,(ix+?const2)
replacement:
0: ld hl,?const1+?const2
1: ld ?reg,(hl)
constraints:
regNotUsed(1,IX,HL)

pattern: Replace ld iy,nn; ld r,(iy+mm) with ld hl,nn+mm; ld r,(hl)
0: ld iy,?const1
1: ld ?reg,(iy+?const2)
replacement:
0: ld hl,?const1+?const2
1: ld ?reg,(hl)
constraints:
regNotUsed(1,IY,HL)

pattern: Replace ld ix,nn; ld r,(ix) with ld hl,nn+mm; ld r,(hl)
0: ld ix,?const1
1: ld ?reg,(ix)
replacement:
0: ld hl,?const1
1: ld ?reg,(hl)
constraints:
regNotUsed(1,IX,HL)

pattern: Replace ld iy,nn; ld r,(iy) with ld hl,nn+mm; ld r,(hl)
0: ld iy,?const1
1: ld ?reg,(iy)
replacement:
0: ld hl,?const1
1: ld ?reg,(hl)
constraints:
regNotUsed(1,IY,HL)

pattern: Remove ld reg,reg
0: ld ?reg,?reg
replacement:
